//
//  HomeInteractor.swift
//  StoriAppTest
//
//  Created by Alejandro Isai Acosta Martinez on 04/11/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  The interactor is responsible for managing data from the model layer 
//  (note that Model is not part of the VIPER architecture, feel free to 
//  implement it or not, but for sure it will make our app more concise).
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import Foundation

protocol HomeBusinessLogic {
    func fetchTopRatedMovies(page: Int)
    func goToMovieDetail(movie: Home.TopRatedMoviesUseCase.Result)
}

class HomeInteractor: Interactor, HomeBusinessLogic {
   
    // MARK: - Properties

    let worker = HomeWorker()

    lazy var presenter: HomePresentationLogic = {
		return self._presenter as! HomePresentationLogic
	}()

    lazy var router: HomeRoutingLogic = {
        return self._router as! HomeRoutingLogic
    }()

    // MARK: - BussinesLogic Implementation

    func fetchTopRatedMovies(page: Int) {
        worker.getTopRatedMovies(page: page) { result in
            switch result {
            case .success(let success):
                self.presenter.presentMoviesResponse(response: success)
            case .failure(let failure):
                self.presenter.presentFailure(message: failure.localizedDescription)
            }
        }
    }

    // MARK: - RoutingLogic Implementation

    func goToMovieDetail(movie: Home.TopRatedMoviesUseCase.Result) {
        self.router.routeToMovieDetail(movie: movie)
    }
}
