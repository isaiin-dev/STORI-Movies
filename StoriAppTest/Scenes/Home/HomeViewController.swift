//
//  HomeViewController.swift
//  StoriAppTest
//
//  Created by Alejandro Isai Acosta Martinez on 04/11/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…) and 
//  responsible for intercepting the user’s action and send it to the 
//  presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import UIKit

protocol HomeDisplayLogic: ViewLayer {
    func displayMovies(moviesResponse: Home.TopRatedMoviesUseCase.Response)
	func displayFailure(message: String)
}

class HomeViewController: UIViewController {
	// MARK: - Properties
	
	lazy var interactor: HomeBusinessLogic = {
		return self._interactor as! HomeBusinessLogic
	}()
    
    private var movies = [Home.TopRatedMoviesUseCase.Result]() {
        didSet {
            DispatchQueue.mainAsync {
                self.moviesTable.reloadData()
            }
        }
    }
    private var currentPage = 1
    private var totalPages = 1
    private var isLoading = false
    private let activityIndicator = UIActivityIndicatorView(style: .medium)

	// MARK: - SubViews
    
    lazy var moviesTable: UITableView = {
        let table = UITableView()
        table.backgroundColor = .smLightMist
        table.showsVerticalScrollIndicator = false
        table.showsHorizontalScrollIndicator = false
        table.separatorStyle = .singleLine
        table.separatorColor = .smDustyTeal
        table.allowsSelection = true
        table.register(TopRatedMovieTableViewCell.self, forCellReuseIdentifier: TopRatedMovieTableViewCell.IDENTIFIER)
        table.delegate = self
        table.dataSource = self
        table.tableFooterView = activityIndicator
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()

	// MARK: - Object Lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}	

	// MARK: - View Lifecycle

	override func viewDidLoad() {
		super.viewDidLoad()
		self.setupView()
		self.setupConstraints()
	}
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        self.interactor.fetchTopRatedMovies(page: currentPage)
        guard !isLoading else { return }
        isLoading = true
        activityIndicator.startAnimating()
    }

	// MARK: - Setup

	private func setup() {
		self.setup(
			interactor: HomeInteractor(),
			router: HomeRouter(),
			presenter: HomePresenter()
		)
	}

	private func setupView() {
        view.backgroundColor = .smLightMist
        configureNavigationBarAppearance(title: "Top Rated Movies")
        view.addSubview(moviesTable)
        setupConstraints()
	}

	private func setupConstraints() {
		NSLayoutConstraint.activate([
            moviesTable.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            moviesTable.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            moviesTable.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            moviesTable.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
	}

	// MARK: - Actions 
}

extension HomeViewController: HomeDisplayLogic {
    func displayMovies(moviesResponse: Home.TopRatedMoviesUseCase.Response) {
        self.currentPage = moviesResponse.page
        self.totalPages = moviesResponse.totalPages

        self.movies.append(contentsOf: moviesResponse.results)

        DispatchQueue.main.async {
            self.isLoading = false
            self.activityIndicator.stopAnimating()
        }
    }
    
	func displayFailure(message: String) {
		print("Something went wrong: \(message)")
	}
}

// MARK: - MoviesTable delegates

extension HomeViewController: UITableViewDelegate, UITableViewDataSource, UIScrollViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        self.movies.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: TopRatedMovieTableViewCell.IDENTIFIER, for: indexPath) as! TopRatedMovieTableViewCell
        var movie = movies[indexPath.row]
        movie.isFavorite = FavoritesManager.shared.isFavorite(movie: movie)
        cell.setup(movie: movie)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return TopRatedMovieTableViewCell.ESTIMATED_HEIGHT
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let movie = self.movies[indexPath.row]
        self.interactor.goToMovieDetail(movie: movie)
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let height = scrollView.frame.size.height

        if offsetY > contentHeight - height * 4 {
            DispatchQueue.mainAsync {
                guard !self.isLoading else { return }
                guard self.currentPage < self.totalPages else { return }
                self.currentPage += 1
                self.interactor.fetchTopRatedMovies(page: self.currentPage)
            }
        }
    }
}

