//
//  MovieDetailViewController.swift
//  StoriAppTest
//
//  Created by Alejandro Isai Acosta Martinez on 05/11/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This layer contains the UI logic (display, update, animate…) and 
//  responsible for intercepting the user’s action and send it to the 
//  presenter. Most importantly, it has no business logic.
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import UIKit

protocol MovieDetailDisplayLogic: ViewLayer {
	func displaySomething(viewModel: MovieDetail.SomeUseCase.ViewModel)
	func displayFailure(message: String)
}

protocol MovieDetailViewControllerDelegate {
    func downloaded(image: UIImage)
}

class MovieDetailViewController: UIViewController {
	// MARK: - Properties
	
	lazy var interactor: MovieDetailBusinessLogic = {
		return self._interactor as! MovieDetailBusinessLogic
	}()
    
    var movie: Home.TopRatedMoviesUseCase.Result?
    private var imageURL: URL?
    private var originalNavBarAppearance: UINavigationBarAppearance?
    private var originalTabBarAppearance: UITabBarAppearance?

	// MARK: - SubViews
    
    lazy var movieDetailView: MovieDetailView = {
        let view = MovieDetailView(movie: self.movie ?? Home.TopRatedMoviesUseCase.Result(adult: false, backdropPath: "", genreIDS: [0], id: 0, originalLanguage: "", originalTitle: "", overview: "", popularity: 9.70, posterPath: "", releaseDate: "", title: "", video: false, voteAverage: 9.70, voteCount: 0, isFavorite: false))
        view.delegate = self
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var contentView: UIView = {
        let view = UIView()
        view.addSubview(movieDetailView)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    lazy var scrollView: UIScrollView = {
        let view = UIScrollView()
        view.addSubview(contentView)
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()

	// MARK: - Object Lifecycle

	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
  
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setup()
	}	

	// MARK: - View Lifecycle
    
    override func viewDidLoad() {
       super.viewDidLoad()
        self.setupView()
        self.setupConstraints()
   }
   
   override func viewWillDisappear(_ animated: Bool) {
       super.viewWillDisappear(animated)
       
       if let navigationController = navigationController, let originalAppearance = originalNavBarAppearance {
           navigationController.navigationBar.standardAppearance = originalAppearance
           navigationController.navigationBar.scrollEdgeAppearance = originalAppearance
       }
       
       if let tabBarController = tabBarController, let originalAppearance = originalTabBarAppearance {
           tabBarController.tabBar.standardAppearance = originalAppearance
           if #available(iOS 15.0, *) {
               tabBarController.tabBar.scrollEdgeAppearance = originalAppearance
           }
       }
   }

	// MARK: - Setup

	private func setup() {
		self.setup(
			interactor: MovieDetailInteractor(),
			router: MovieDetailRouter(),
			presenter: MovieDetailPresenter()
		)
	}

	private func setupView() {
        view.backgroundColor = .smLightMist
        configureNavigationBarAppearance(title: movie?.title ?? "Detail")
        view.addSubview(scrollView)
	}

	private func setupConstraints() {
		NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: view.widthAnchor),
            
            movieDetailView.topAnchor.constraint(equalTo: contentView.topAnchor),
            movieDetailView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            movieDetailView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            movieDetailView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)
        ])
	}

	// MARK: - Actions 
}

extension MovieDetailViewController: MovieDetailDisplayLogic {
	func displaySomething(viewModel: MovieDetail.SomeUseCase.ViewModel) {}

	func displayFailure(message: String) {
		print("Something went wrong: \(message)")
	}
}

extension MovieDetailViewController: MovieDetailViewControllerDelegate {
    func downloaded(image: UIImage) {
        DispatchQueue.mainAsync {
            if let navigationController = self.navigationController {
                self.originalNavBarAppearance = navigationController.navigationBar.standardAppearance
            }
            if let tabBarController = self.tabBarController {
                self.originalTabBarAppearance = tabBarController.tabBar.standardAppearance
            }
            
            self.applyInterfaceColors(from: image)
        }
    }
}
