//
//  MovieDetailInteractor.swift
//  StoriAppTest
//
//  Created by Alejandro Isai Acosta Martinez on 05/11/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  The interactor is responsible for managing data from the model layer 
//  (note that Model is not part of the VIPER architecture, feel free to 
//  implement it or not, but for sure it will make our app more concise).
//
//  This file was generated by the IsaiinDev's iOS Templates so
//  you can apply clean architecture to your iOS projects.
//

import Foundation

protocol MovieDetailBusinessLogic {
    func requestSomething(request: MovieDetail.SomeUseCase.Request)
    func userInteractionInSomewhere()
}

class MovieDetailInteractor: Interactor, MovieDetailBusinessLogic {
   
    // MARK: - Properties

    let worker = MovieDetailWorker()

    lazy var presenter: MovieDetailPresentationLogic = {
		return self._presenter as! MovieDetailPresentationLogic
	}()

    lazy var router: MovieDetailRoutingLogic = {
        return self._router as! MovieDetailRoutingLogic
    }()

    // MARK: - BussinesLogic Implementation

    func requestSomething(request: MovieDetail.SomeUseCase.Request) {
        let response = worker.doSomeWork()

        if response {
            self.presenter.presentSuccess(response: MovieDetail.SomeUseCase.Response())
        } else {
            self.presenter.presentFailure(message: "Error in response")
        }
    }

    // MARK: - RoutingLogic Implementation

    func userInteractionInSomewhere() {
        self.router.routeToSomewhere()
    }
}
